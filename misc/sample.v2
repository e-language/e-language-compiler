struct User
    %id: u32 = 0,
    id: u32,
    nameref: i8^,
    desc: <i8, 10>,
    desclen : u8,
end

struct Administrator
    users: <<User, 10>, TOTAL_ADMIN_LIMIT>,
    level: u8,
end

const TOTAL_ADMIN_LIMIT = 10;

% t: <i8, 3> = {0, 1, 2}; % t@^
% struct {i8 val[8];} t = {{0, 1, 2}}; // *(t.val)

% t: <User, 2> = {User{id=1, desc={"a"}}, User{id=2, desc={"b"}}};
% struct {User val[2];} t = {{1, 0, {"a"}}, {2, 0, {"b"}}};

const BASE_MUL = 12;
const TOTOAL_USERCNT = 10 + 3 * BASE_MUL - 1;
const blah1 = 1 bsl 8;
const blah2 = 1 bsr 8;

fun main(argc: i32, argv: i8^^): i32
    users: <User, TOTOAL_USERCNT>;
    cnt: u32 = TOTOAL_USERCNT;
    init_users(users@, sizeof(users)/sizeof(User));
    return 0;
end

fun init_users(users: User^^, size: u8): void
    cnt: u32 = 30 + 52 * size / 2 + 100 / 10;
    while (cnt < size)
	init_user((users + cnt)^, cnt, "test");
    end
end

fun init_user(user: User^, id: u8, desc: i8^): void
    if (id < 1)
	user^.id = 1;
	user^.id = user^.id + 1;
    elif (id == 5)
	user^.id = 0;
    elif (id == 10)
	user^.id = 20;
    elif (id == 20)
	user^.id = 10;
    else
	user^.id = id;
    end
    user^.desclen = strlen(desc);
end

